
model{

# Priors
for(i in 1:n.bee){

 # Average number of plant families each bee genus interacts with
  epsilon[i] ~ dnorm(0, tau.lambda)

  # Probability of documenting interaction
  eta[i] ~ dnorm(0, tau.p)

}

# Intercept
alpha.lambda ~ dnorm(0, 0.01)
# Slope
beta.size ~ dnorm(0, 0.01)
# Random effect
tau.lambda <- 1 / (sd.lambda * sd.lambda)
sd.lambda ~ dgamma(0.01, 0.01)

# Intercept
alpha.p ~ dnorm(0, 0.01)
beta.detect ~ dnorm(0, 0.01)

# Random effect
tau.p <- 1 / (sd.p * sd.p)
sd.p ~ dgamma(0.01, 0.01)

# Overdispersion parameter
  # In poisson = 1
# r ~ dunif(0, 50)

# Model
for(i in 1:n.bee){   # For each bee species


  # N is the true number of plant families that each bee genus interacts with
  # lambda is the average number of plants that each bee genus interacts with
  N[i] ~ dpois(lambda[i])
  
  # Negative binomial
    # p = success parameter
    # r = overdispersion parameter
 #N[i] ~ dnegbin(p[i], r)
 #
 #p[i] <- r/(r+lambda[i])
  
  # Relating 
  log(lambda[i]) <- alpha.lambda #+ epsilon[i] #+ beta.size * size[i]

  for(k in 1:n.study){
  
      # y = the number of plants that bee genus i is observed interacting with in each study k
      # p = the probability that each study detected a plant-bee interaction
      y[i, k] ~ dbinom(p.eff[i,k], N[i])
  
     logit(p.eff[i,k]) <- alpha.p #+ eta[i] # + beta.detect * size[i] 

  }

}
    


}

